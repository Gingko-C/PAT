#include <iostream>
#include <vector>
#include <queue>
#include <climits>
using namespace std;

struct node {
	node() = default;
	node(int v, int c, int d) :val(v), copynum(c), deep(d) {}
	int val;
	int copynum;
	int deep;
};

int n, min_deep = INT_MAX;

void dfs(node t) {
	if (t.val < n) {
		dfs({ t.val + t.copynum,t.copynum, t.deep + 1 });
		dfs({ t.val * 2,t.val,t.deep + 3 });
	}
	if (t.val == n) {
		min_deep = (t.deep < min_deep) ? t.deep : min_deep;
	}
}

int main()
{
	cin >> n;
	if (n == 1) {
		cout << 0 << endl;
		return 0;
	}
	node st(2, 1, 3);
	/*queue<node> q;
	q.push(st);
	while (!q.empty()) {
		node t = q.front();
		q.pop();
		if (t.val < n) {
			q.push({ t.val + t.copynum,t.copynum, t.deep + 1 });
			q.push({ t.val * 2,t.val,t.deep + 3 });
		}
		if (t.val == n) {
			min_deep = (t.deep < min_deep) ? t.deep : min_deep;
		}
	}*/
	dfs(st);
	cout << min_deep << endl;
//	system("pause");
	return 0;
}
