//AC
//回型输出
#include <vector>
#include <iostream>
#include <algorithm>
#include <cmath>
using namespace std;
int k, m, n;

void dfs(vector<int> &v, int index, vector<vector<int>> &vv, int row, int col) {
	vv[row][col] = v[index];

	if (vv[row - 1][col] != 0 && vv[row][col - 1] != 0) {
		if (vv[row][col + 1] == 0) {
			dfs(v, index + 1, vv, row, col + 1);
			return;
		}
		if (vv[row + 1][col] == 0) {
			dfs(v, index + 1, vv, row + 1, col);
			return;
		}
	}
	if (vv[row - 1][col] != 0 && vv[row][col + 1] != 0) {
		if (vv[row + 1][col] == 0) {
			dfs(v, index + 1, vv, row + 1, col);
			return;
		}
		if (vv[row][col - 1] == 0) {
			dfs(v, index + 1, vv, row, col - 1);
			return;
		}
	}
	if (vv[row][col + 1] != 0 && vv[row + 1][col] != 0) {
		if (vv[row][col - 1] == 0) {
			dfs(v, index + 1, vv, row, col - 1);
			return;
		}
		if (vv[row - 1][col] == 0) {
			dfs(v, index + 1, vv, row - 1, col);
			return;
		}
	}
	if (vv[row][col - 1] != 0 && vv[row + 1][col] != 0) {
		if (vv[row - 1][col] == 0) {
			dfs(v, index + 1, vv, row - 1, col);
			return;
		}
		if (vv[row][col + 1] == 0) {
			dfs(v, index + 1, vv, row, col + 1);
			return;
		}
	}
	
}

int main() {
	scanf("%d", &k);
	vector<int> v(k);
	for (int i = 1; i <= sqrt(k); i++) {
		if (k%i == 0) {
			n = i;
			m = k / i;
		}
	}
	vector<vector<int>> vv(m + 2, vector<int>(n + 2));
	for (int i = 0; i < n + 2; i++) {
		vv[0][i] = vv[m + 1][i] = 1;
	}
	for (int i = 0; i < m + 2; i++) {
		vv[i][0] = vv[i][n + 1] = 1;
	}
	for (int i = 0; i < k; i++) {
		scanf("%d", &v[i]);
	}
	sort(v.rbegin(), v.rend());
	dfs(v, 0, vv, 1, 1);
	for (int i = 1; i <= m; i++) {
		for (int j = 1; j <= n; j++) {
			if (j != 1) printf(" ");
			printf("%d", vv[i][j]);
			if (j == n) printf("\n");
		}
	}
	return 0;
}
