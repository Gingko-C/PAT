//AC
//从i=2开始,如果j[i,sqrt(n)]是n的因数，那么继续看j*(j+1)是否也是n的因数如此类推，不是就跳出，然后i++。
//如果直到i=sqrt(n)也没有找到n的因数，那么n为质数，单独处理
#include <vector>
#include <iostream>
#include <algorithm>
#include <cmath>
using namespace std;

int main() {
	int n, l = 0, f = 0;
	cin >> n;
	for (int i = 2; i <= sqrt(n); i++) {
		int temp = 1;
		int j;
		for (j = i; j <= sqrt(n); j++) {
			temp *= j;
			if (n%temp != 0) break;
		}
		if (j - i> l) {
			f = i;
			l = j - i;
		}
	}
	if (f == 0) {
		cout << 1 << endl;
		cout << n << endl;
	}
	else {
		cout << l << endl;
		for (int i = 0; i < l; i++) {
			if (i != 0) cout << "*";
			cout << f++;
		}
		cout << endl;
	}
	return 0;
}



//19/20
//暴力穷举 因为2^31小于13的阶乘 所以最长不到12（2~13）；
//一个测试结点未通过 原因不明
#include <vector>
#include <iostream>
#include <algorithm>
#include <cmath>
#include <climits>
using namespace std;

long long int cres(int a, int b) {
	long long int res = 1;
	for (int i = a; i <= b; i++) {
		res *= i;
		if (res > INT_MAX) {
			res = INT_MAX + 1;
			break;
		}
	}
	return res;
}

int main() {
	int n, min_n = INT_MAX, max_l = 0;
	long long int cr;
	cin >> n;
	bool flag = 0;
	bool prime = 1;
	for (int i = 0; ; i++) {
		for (int j = 2; j <= sqrt(n); j++) {
			cr = cres(j, j + i);
			if (j == 2 && cr > n) {
				flag = 1;
				break;
			}
			if (cr > n) break;
			if (n%cr == 0) {
				if (i == 0) prime = 0;
				if (i + 1 > max_l) {
					max_l = i + 1;
					min_n = j;
				}
				break;
			}
		}
		if (prime == 1) {
			max_l = 1;
			min_n = n;
			break;
		}
		if (flag == 1) break;
	}
	cout << max_l << endl;
	for (int i = min_n; i < min_n + max_l; i++) {
		if (i != min_n) cout << "*";
		cout << i;
	}
	cout << endl;
	return 0;
}