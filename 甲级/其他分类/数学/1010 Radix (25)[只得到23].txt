#include <iostream>
using std::cout;
using std::cin;
using std::endl;
#include <vector>
using std::vector;
#include <string>
using std::string;
#include <math.h>
using std::pow;

int char2int(char c) {
	if (c < 'a') return c - '0';
	else return c - 'a' + 10;
}

int radixtransToDec(int radix, string num) {
	int n = num.size()-1;
	int res = 0;
	for (int i = 0; i <= n; i++) {
		res += char2int(num[i])*pow(radix, n - i);
	}
	return res;
}

int main() {
	vector<string> n_str(3);
	vector<int> n(3);
	int p, r, res_radix;
	cin >> n_str[1] >> n_str[2] >> p >> r;
	int q = 3 - p; //目标数字位置
	char cr='0';
	for (char c : n_str[q]) {
		cr = (c > cr) ? c : cr;
	}
	int min_radix = char2int(cr);
	n[p] = radixtransToDec(r, n_str[p]);
	for (int i = min_radix;; i++) {
		if (n[p] == radixtransToDec(i, n_str[q])) {
			res_radix = i;
			break;
		}
		if (n[p] < radixtransToDec(i, n_str[q])) {
			res_radix = -1;
			break;
		}
		if (n_str[q].size() == 1) {
			res_radix = -1;
			break;
		}
	}
	if (res_radix == -1) cout << "Impossible" << endl;
	else cout << res_radix << endl;
	return 0;
}