//AC
//queue的使用
//本题的几个关键思路 这种重复筛选使用queue队列是较好的方案
//每组胜出一个所以淘汰的排名为group(组数)+1
//本题 题目阅读会有困难，第二排为每个选手对应的成绩 第三排是按顺序每个位置上的选手 6 0 8 7 10 5 9 1 4 2 3的意思是第0个位置上站的是6号选手 第1个位置上站的是0号选手，按这个位置进行比赛，如ng=3（0~2位置选手进行比赛，后面也是如此）

#include <vector>
#include <iostream>
#include <algorithm>
#include <queue>
using namespace std;

struct player
{
	int id;
	int weight;
	int rank;
};

int main() {
	int np, ng, temp;
	cin >> np >> ng;
	vector<player> p(np);
	queue<player> q;
	for (int i = 0; i < np; i++) {
		cin >> p[i].weight;
		p[i].id = i;
	}
	for (int i = 0; i < np; i++) {
		cin >> temp;
		q.push(p[temp]);
	}
	while (!q.empty()) {
		int sz = q.size();
		if (sz == 1) {
			p[q.front().id].rank = 1;
			break;
		}
		int group = sz / ng;
		if (sz%ng != 0) {
			group++;
		}
		int gmaxw = -1, gbestid, count = 0;
		player temp_player;
		for (int i = 0; i < sz; i++) {
			temp_player = q.front();
			q.pop();
			if (temp_player.weight > gmaxw) {
				gmaxw = temp_player.weight;
				gbestid = temp_player.id;
			}
			p[temp_player.id].rank = group + 1;
			count++;
			if (count == ng || i == sz - 1) {
				q.push(p[gbestid]);
				count = 0;
				gmaxw = -1;
			}
		}
	}
	bool flag_cout = 0;
	for (int i = 0; i < np; i++) {
		if (flag_cout == 0) {
			flag_cout = 1;
			cout << p[i].rank;
		}
		else cout << " " << p[i].rank;
	}
	cout << endl;
	return 0;
}