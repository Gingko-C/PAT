//AC
//Dijkstra算法
#include <vector>
#include <iostream>
#include <algorithm>
#include <string>
#include <map>
#include <climits>
using namespace std;
vector<int> happiness;

bool cmp(vector<int> &a, vector<int> &b) {
	int hsuma = 0, hsumb = 0;
	for (int i = 1; i < a.size(); i++) {
		hsuma += happiness[a[i]];
	}
	for (int i = 1; i < b.size(); i++) {
		hsumb += happiness[b[i]];
	}
	if (hsuma > hsumb) return 1;
	if (hsuma < hsumb) return 0;
	if ((float)hsuma / (a.size() - 1) > (float)hsumb / (b.size() - 1)) return 1;
	if ((float)hsuma / (a.size() - 1) < (float)hsumb / (b.size() - 1)) return 0;
	return 1;
}

int main() {
	int n, k, temp, dest;
	cin >> n >> k;
	vector<string> city(n);
	map<string, int> s2i;
	happiness.resize(n);
	string bb, ee;
	vector<vector<int>> w(n, vector<int>(n, INT_MAX));
	vector<int> dis(n, INT_MAX);
	vector<bool> flag(n, 0);
	vector<vector<vector<int>>> sws(n);
	cin >> city[0];
	s2i[city[0]] = 0;
	for (int i = 1; i < n; i++) {
		cin >> city[i] >> happiness[i];
		s2i[city[i]] = i;
		if (city[i] == "ROM") dest = i;
	}
	for (int i = 0; i < k; i++) {
		cin >> bb >> ee >> temp;
		w[s2i[bb]][s2i[ee]] = w[s2i[ee]][s2i[bb]] = min(temp, w[s2i[bb]][s2i[ee]]);
		if (s2i[bb] == 0) {
			if (temp < dis[s2i[ee]]) {
				dis[s2i[ee]] = temp;
				sws[s2i[ee]] = { {0,s2i[ee]} };
			}
		}
		if (s2i[ee] == 0) {
			if (temp < dis[s2i[bb]]) {
				dis[s2i[bb]] = temp;
				sws[s2i[bb]] = { { 0,s2i[bb] } };
			}
		}
	}
	dis[0] = 0;
	flag[0] = 1;
	for (int i = 1; i < n; i++) {
		int baseP = -1;
		int temp_min = INT_MAX;
		for (int j = 1; j < n; j++) {
			if (flag[j] == 0 && dis[j] < temp_min) {
				temp_min = dis[j];
				baseP = j;
			}
		}
		if (baseP == -1) break;
		flag[baseP] = 1;
		for (int j = 1; j < n; j++) {
			if (flag[j] == 0) {
				int temp_dis = (w[baseP][j] == INT_MAX) ? INT_MAX : dis[baseP] + w[baseP][j];
				if (temp_dis < dis[j]) {
					dis[j] = temp_dis;
					sws[j] = sws[baseP];
					for (auto &o : sws[j]) {
						o.push_back(j);
					}
				}
				else if (temp_dis == dis[j]) {
					for (auto o : sws[baseP]) {
						sws[j].push_back(o);
						sws[j].back().push_back(j);
					}
				}
			}
		}
	}
	sort(sws[dest].begin(), sws[dest].end(), cmp);
	int hsum = 0;
	for (int i = 1; i < sws[dest][0].size(); i++) {
		hsum += happiness[sws[dest][0][i]];
	}
	cout << sws[dest].size() << " " << dis[dest] << " " << hsum << " " << hsum / (sws[dest][0].size() - 1) << endl;
	for (int i = 0; i < sws[dest][0].size(); i++) {
		if (i != 0) cout << "->";
		cout << city[sws[dest][0][i]];
	}
	cout << endl;
	return 0;
}


//第一次做的时候：
//AC
#include <vector>
using std::vector;
#include <map>
using std::map;
#include <string>
using std::string;
#include <iostream>
using std::cin;
using std::cout;
using std::endl;
#include <algorithm>
 
#define INT_MAX 100000
 
int main() {
    int vnum, wnum, dest;
    int baseP = 0;
    string name;
    cin >> vnum >> wnum >> name;
    string bcityname, ecityname;
    vector<int> happiness(vnum);
    vector<int> dis(vnum, INT_MAX);
    vector<bool> flag(vnum, 0);
    vector<string> name_order;
    vector<vector<int>> wcost(vnum, vector<int>(vnum, INT_MAX));
    vector<vector<int>> wh;
    vector<vector<vector<int>>> sws(vnum);
    map<string, int> n2n;
    n2n.insert({ name, 0 });
    name_order.push_back(name);
    for (int i = 1;i < vnum;i++) {
        cin >> name >> happiness[i];
        n2n[name] = i;
        name_order.push_back(name);
        if (name == "ROM") dest = i;
    }
    for (int i = 0;i < wnum;i++) {
        cin >> bcityname >> ecityname;
        cin >> wcost[n2n[bcityname]][n2n[ecityname]];
        wcost[n2n[ecityname]][n2n[bcityname]] = wcost[n2n[bcityname]][n2n[ecityname]];
        if (n2n[bcityname] == 0) {
            dis[n2n[ecityname]] = wcost[n2n[bcityname]][n2n[ecityname]];
            sws[n2n[ecityname]] = { { 0,n2n[ecityname] } };
        }
        if (n2n[ecityname] == 0) {
            dis[n2n[bcityname]] = wcost[n2n[bcityname]][n2n[ecityname]];
            sws[n2n[bcityname]] = { { 0,n2n[bcityname] } };
        }
    }
    dis[0] = 0;
    flag[0] = 1;
    for (int i = 1;i < vnum;i++) {
        int min = INT_MAX;
        for (int j = 0;j < vnum;j++) {
            if (flag[j] == 0 && dis[j] < min) {
                min = dis[j];
                baseP = j;
            }
        }
        flag[baseP] = 1;
        if (baseP == dest) break;
        for (int j = 0;j < vnum;j++) {
            int temp_cost = (wcost[baseP][j] == INT_MAX) ? INT_MAX : dis[baseP] + wcost[baseP][j];
            if (temp_cost < dis[j]) {
                dis[j] = temp_cost;
                sws[j] = sws[baseP];
                for (auto &w : sws[j]) {
                    w.push_back(j);
                }
            }
            else if (temp_cost == dis[j]) {
                for (auto w : sws[baseP]) {
                    sws[j].push_back(w);
                    sws[j].back().push_back(j);
                }
            }
        }
    }
 
    for (int i = 0;i < sws[dest].size();i++) {
        int h = 0;
        for (auto c : sws[dest][i]) {
            h += happiness[c];
        }
        int avgh = h / (sws[dest][i].size() - 1);
        wh.push_back({ h,avgh,i });
    }
 
    std::sort(wh.begin(), wh.end());
 
    cout << sws[dest].size() << " " << dis[dest] << " "<<wh.back()[0]<<" "<<wh.back()[1]<<endl;
    bool flag_cout = false;
    for (auto i : sws[dest][wh.back()[2]]) {
        if (flag_cout == false) {
            cout << name_order[i];
            flag_cout = true;
        }
        else cout << "->" << name_order[i];
    }
    cout << endl;
    system("pause");
    return 0;
}