//AC
//堆排序 后序遍历
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

bool flag = 1;
bool cflag = 0;
void updateHeap(vector<int> &v, int n, bool big) {
	int max_n = v.size() - 1;
	int temp = n;
	if (max_n >= 2 * n) {
		if(big==1) temp = (v[temp] >= v[2 * n]) ? temp : 2 * n;
		else temp = (v[temp] <= v[2 * n]) ? temp : 2 * n;
	}
	else return;
	if (max_n >= 2 * n + 1) {
		if (big == 1) temp = (v[temp] >= v[2 * n + 1]) ? temp : 2 * n + 1;
		else temp = (v[temp] <= v[2 * n + 1]) ? temp : 2 * n + 1;
	}
	if (temp != n) {
		flag = 0;
		swap(v[n], v[temp]);
		updateHeap(v, temp, big);
	}
}

void initHeap(vector<int> &v, bool big) {
	int n = v.size() - 1;
	int lastf = n / 2;
	for (int i = lastf; i >= 1; i--) {
		updateHeap(v, i, big);
	}
}

vector<int> heapSort(vector<int> &v, bool big) {
	vector<int> res;
	initHeap(v, big);
	int n = v.size() - 1;
	while (n != 0) {
		swap(v[1], v[n]);
		res.push_back(v[n]);
		v.pop_back();
		updateHeap(v, 1, big);
		n--;
	}
	return res;
}

void postorder(vector<int> &v, int n) {
	int max_n = v.size() - 1;
	if (max_n >= 2 * n) postorder(v, 2 * n);
	if (max_n >= 2 * n + 1) postorder(v, 2 * n + 1);
	if (cflag == 0) cflag = 1;
	else cout << " ";
	cout << v[n];
}
int main() {
	int m, n;
	cin >> m >> n;
	for (; m > 0; m--) {
		vector<int> v(n + 1);
		cflag = 0;
		for (int i = 1; i <= n; i++) {
			cin >> v[i];
		}
		flag = 1;
		vector<int> v_copy = v;
		if (v[1] > v.back()) {
			initHeap(v_copy, 1);
			if (flag == 1) cout << "Max Heap" << endl;
		}
		else {
			initHeap(v_copy, 0);
			if (flag == 1) cout << "Min Heap" << endl;
		}
		if (flag == 0) cout << "Not Heap" << endl;
		postorder(v, 1);
		cout << endl;
	}
	return 0;
}
