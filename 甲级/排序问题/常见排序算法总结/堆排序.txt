#include <vector>
#include <iostream>
#include <algorithm>
#include <string>
#include <queue>
using namespace std;

void updateHeap(vector<int> &v, int n) {
	int max_n = v.size() - 1;
	int max_t = n;
	if (2 * n <= max_n) max_t = (v[2 * n] < v[n]) ? n : 2 * n;
	else return;
	if (2 * n + 1 <= max_n) max_t = (v[2 * n + 1] < v[max_t]) ? max_t : 2 * n + 1;
	swap(v[n], v[max_t]); 
	if (max_t != n) updateHeap(v, max_t);
}

void initHeap(vector<int> &v) {
	int n = v.size() - 1;
	int lastf = n / 2;
	for (int i = lastf; i >= 1; i--) {
		updateHeap(v, i);
	}
}

void heapSort(vector<int> &v,vector<int> &res) {
	initHeap(v);
	while (v.size() != 1) {  //v[0]并不是堆数的结点
		int topn = v[1];
		swap(v[1], v.back());
		v.pop_back();
		updateHeap(v, 1);
		res.push_back(topn);
	}
}

int main() {
	int n;
	cin >> n;
	vector<int> v(n + 1);
	vector<int> res;
	for (int i = 1; i <= n; i++) {
		cin >> v[i];
	}
	heapSort(v, res);
	for(auto b=res.rbegin();b!=res.rend();b++){
		if (b != res.rbegin()) cout << " ";
		cout << *b;
	}
	cout << endl;
	system("pause");
	return 0;
}
