#include <vector>
using std::vector;
#include <iostream>
using std::cin;
using std::cout;
using std::endl;
#include <queue>
using std::queue;
 
#define INT_MAX 100000
 
int m, n, l, t, count = 0;
int xm[6] = { 1,0,0,-1,0,0 };
int ym[6] = { 0,1,0,0,-1,0 };
int zm[6] = { 0,0,1,0,0,-1 };
 
struct Node
{
    int z, y, x;
};
 
bool InBoard(int z, int y, int x) {
    if (z >= 0 && z < l && y >= 0 && y < m && x >= 0 && x < n) return true;
    return false;
}
 
int bfs(vector<vector<vector<int>>> &v, vector<vector<vector<bool>>> &v_flag, int z, int y, int x) {
    int temp_count = 1;
    queue<Node> q;
    q.push({ z,y,x });
    v_flag[z][y][x] = 1;
    while (!q.empty()) {
        Node root = q.front();
        q.pop();
        for (int i = 0;i < 6;i++) {
            Node temp;
            temp.x = root.x + xm[i];
            temp.y = root.y + ym[i];
            temp.z = root.z + zm[i];
            if (InBoard(temp.z, temp.y, temp.x)) {
                if (v[temp.z][temp.y][temp.x] == 1 && v_flag[temp.z][temp.y][temp.x] == 0) {
                    v_flag[temp.z][temp.y][temp.x] = 1;
                    temp_count++;
                    q.push(temp);
                }
            }
        }
    }
    if (temp_count < t) return 0;
    return temp_count;
}
 
int main() {
    cin >> m >> n >> l >> t;
    vector<vector<vector<int>>> v(l, vector<vector<int>>(m, vector<int>(n, 0)));
    vector<vector<vector<bool>>> v_flag(l, vector<vector<bool>>(m, vector<bool>(n, false)));
    for (int k = 0;k < l;k++) {
        for (int j = 0;j < m;j++) {
            for (int i = 0;i < n;i++) {
                cin >> v[k][j][i];
            }
        }
    }
    for (int i = 0;i < l;i++) {
        for (int j = 0;j < m;j++) {
            for (int k = 0;k < n;k++) {
                if (v[i][j][k] == 1 && v_flag[i][j][k] == 0) {
                    count+=bfs(v,v_flag,i,j,k);
                }
            }
        }
    }
    cout << count << endl;
    system("pause");
    return 0;
}