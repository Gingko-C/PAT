//AC
//较复杂的BFS题目，注意mv的应用
#include <vector>
#include <iostream>
#include <algorithm>
#include <queue>
using namespace std;

int main() {
	int mv[6][3] = { { 1,0,0 },{ 0,1,0 },{ 0,0,1 },{ -1,0,0 },{ 0,-1,0 },{ 0,0,-1 } };
	int m, n, l, t, cnt = 0, vol = 0;
	cin >> m >> n >> l >> t;
	vector<vector<vector<int>>> brain(l + 2, vector<vector<int>>(m + 2, vector<int>(n + 2)));
	vector<vector<vector<int>>> visit(l + 2, vector<vector<int>>(m + 2, vector<int>(n + 2, 0)));
	for (int i = 1; i <= l; i++) {
		for (int j = 1; j <= m; j++) {
			for (int k = 1; k <= n; k++) {
				cin >> brain[i][j][k];
			}
		}
	}
	for (int i = 1; i <= l; i++) {
		for (int j = 1; j <= m; j++) {
			for (int k = 1; k <= n; k++) {
				if (visit[i][j][k] == 0 && brain[i][j][k] == 1) {
					cnt = 0;
					queue<vector<int>> q;
					visit[i][j][k] = 1;
					cnt++;
					q.push({ i,j,k });
					while (!q.empty()) {
						vector<int> tv = q.front();
						q.pop();
						for (int x = 0; x < 6; x++) {
							if (visit[tv[0] + mv[x][0]][tv[1] + mv[x][1]][tv[2] + mv[x][2]] == 0
								&& brain[tv[0] + mv[x][0]][tv[1] + mv[x][1]][tv[2] + mv[x][2]] == 1) {
								visit[tv[0] + mv[x][0]][tv[1] + mv[x][1]][tv[2] + mv[x][2]] = 1;
								cnt++;
								q.push({ tv[0] + mv[x][0], tv[1] + mv[x][1], tv[2] + mv[x][2] });
							}
						}
					}
					if (cnt >= t) vol += cnt;
				}
			}
		}
	}
	cout << vol << endl;
	return 0;
}
