//AC
//BFS 供应链系列问题
#include <vector>
#include <iostream>
#include <algorithm>
#include <queue>
#include <cmath>
using namespace std;

int main() {
	int n, root, temp, maxdeep = 0, cnt = 0;
	double p, r, hp;
	scanf("%d %lf%lf", &n, &p, &r);
	vector<vector<int>> f2c(n);
	vector<int> deep(n);
	for (int i = 0; i < n; i++) {
		scanf("%d", &temp);
		if (temp == -1) root = i;
		else f2c[temp].push_back(i);
	}
	queue<int> q;
	q.push(root);
	while (!q.empty()) {
		int temp_root = q.front();
		q.pop();
		maxdeep = max(maxdeep, deep[temp_root]);
		for (int i : f2c[temp_root]) {
			deep[i] = deep[temp_root] + 1;
			q.push(i);
		}
	}
	hp = p * pow(1 + r / 100, maxdeep);
	for (int i = 0; i < n; i++) {
		if (deep[i] == maxdeep) cnt++;
	}
	printf("%.2lf %d\n", hp, cnt);
	return 0;
}
