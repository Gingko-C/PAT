//AC
//只能用BFS
#include <vector>
#include <iostream>
#include <algorithm>
#include <queue>
#include <string>
using namespace std;

struct node {
	int l = -1, r = -1;
};
int main() {
	int n, root, ed;
	string l, r;
	cin >> n;
	vector<node> v(n);
	vector<bool> show(n, 0);
	vector<int> deep(n);
	for (int i = 0; i < n; i++) {
		cin >> l >> r;
		if (l != "-") {
			v[i].l = stoi(l);
			show[stoi(l)] = 1;
		}
		if (r != "-") {
			v[i].r = stoi(r);
			show[stoi(r)] = 1;
		}
	}
	for (int i = 0; i < n; i++) {
		if (show[i] == 0) {
			root = i;
			break;
		}
	}
	queue<int> q;
	q.push(root);
	deep[root] = 1;
	int t;
	int stat = 0; //1表示非完全树结点出现 2表示叶结点出现
	bool comp = 1;
	while (!q.empty()) {
		t = q.front();
		q.pop();
		int cl = 0, cr = 0;
		if (v[t].l != -1) {
			deep[v[t].l] = deep[t] + 1;
			q.push(v[t].l);
			cl++;
		}
		if (v[t].r != -1) {
			deep[v[t].r] = deep[t] + 1;
			q.push(v[t].r);
			cr++;
		}
		if (cl == 0 && cr == 1) comp = 0;
		if (stat == 0) {
			if (cl+cr == 0) stat = 2;
			if (cl == 1 && cr==0) stat = 1;
		}
		else {
			if (cl + cr != 0) comp = 0;
		}
	}
	if (comp == 1) cout << "YES " << t << endl;
	else cout << "NO " << root << endl;
	return 0;
}
