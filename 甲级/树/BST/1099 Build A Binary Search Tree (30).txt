//AC
//BST+BFS
#include <vector>
#include <iostream>
#include <algorithm>
#include <queue>
using namespace std;

struct node {
	int left, right, val;
};

vector<node> v;
vector<int> val;
vector<vector<int>> d2v;
int bfscnt(int root) {
	int cnt = 1;
	queue<int> q;
	q.push(root);
	while (!q.empty()) {
		int t = q.front();
		q.pop();
		if (v[t].left != -1) {
			q.push(v[t].left);
			cnt++;
		}
		if (v[t].right != -1) {
			q.push(v[t].right);
			cnt++;
		}
	}
	return cnt;
}

void putval(vector<int> tv, int root, int deep) {
	if (tv.empty()) return;
	int order = 0;
	if(v[root].left!=-1) order = bfscnt(v[root].left);
	v[root].val = tv[order];
	d2v[deep].push_back(root);
	putval(vector<int>(tv.begin(), tv.begin() + order), v[root].left, deep + 1);
	putval(vector<int>(tv.begin() + order + 1, tv.end()), v[root].right, deep + 1);
}

int main() {
	int n;
	cin >> n;
	v.resize(n);
	val.resize(n);
	d2v.resize(n);
	for (int i = 0; i < n; i++) {
		cin >> v[i].left >> v[i].right;
	}
	for (int i = 0; i < n; i++) {
		cin >> val[i];
	}
	sort(val.begin(), val.end());
	putval(val, 0, 0);
	bool cflag = 0;
	for (int i = 0; i < n; i++) {
		if (d2v[i].empty()) break;
		for (int j : d2v[i]) {
			if (cflag == 0) cflag = 1;
			else cout << " ";
			cout << v[j].val;
		}
	}
	cout << endl;
	return 0;
}
