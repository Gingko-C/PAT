//AC
//BFS+BST
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;
struct node {
	int val, l = -1, r = -1, deep = -1;
};
vector<node> v;
int max_deep = 1;
vector<int> d;
void insertNode(int root ,int nd) {
	if (v[nd].val > v[root].val) {
		if (v[root].r == -1) {
			v[root].r = nd;
			v[nd].deep = v[root].deep + 1;
			d[v[nd].deep]++;
			max_deep = max(max_deep, v[nd].deep);
			return;
		}
		else {
			insertNode(v[root].r, nd);
		}
	}
	else {
		if (v[root].l == -1) {
			v[root].l = nd;
			v[nd].deep = v[root].deep + 1;
			d[v[nd].deep]++;
			max_deep = max(max_deep, v[nd].deep);
			return;
		}
		else {
			insertNode(v[root].l, nd);
		}
	}
}
int main() {
	int n;
	cin >> n;
	d.resize(n + 1);
	v.resize(n);
	cin >> v[0].val;
	v[0].deep = 1;
	d[1]++;
	for (int i = 1; i < n; i++) {
		cin >> v[i].val;
		insertNode(0, i);
	}
	cout << d[max_deep] << " + " << d[max_deep - 1] << " = " << d[max_deep] + d[max_deep - 1] << endl;
	return 0;
}
