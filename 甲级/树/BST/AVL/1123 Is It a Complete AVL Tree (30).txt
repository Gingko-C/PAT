//AC
//BFS+AVL
#include <vector>
#include <iostream>
#include <algorithm>
#include <queue>
using namespace std;

struct node {
	int val, deep;
	node *left, *right;
};

node* leftRotate(node *tree) {
	node *temp = tree->right;
	tree->right = temp->left;
	temp->left = tree;
	return temp;
}

node* rightRotate(node *tree) {
	node *temp = tree->left;
	tree->left = temp->right;
	temp->right = tree;
	return temp;
}

node* leftRightRotate(node *tree) {
	tree->left = leftRotate(tree->left);
	return rightRotate(tree);
}

node* rightLeftRotate(node *tree) {
	tree->right = rightRotate(tree->right);
	return leftRotate(tree);
}
int getHeight(node* tree) {
	if (tree == NULL) return 0;
	int l = getHeight(tree->left);
	int r = getHeight(tree->right);
	return max(l, r) + 1;
}
node* insertAVL(node* tree, int val) {
	if (tree == NULL) {
		tree = new node();
		tree->val = val;
	}
	else if (val > tree->val) {
		tree->right = insertAVL(tree->right, val);
		int l = getHeight(tree->left), r = getHeight(tree->right);
		if (r - l >= 2) {
			if (val > tree->right->val) {
				tree = leftRotate(tree);
			}
			else {
				tree = rightLeftRotate(tree);
			}
		}
	}
	else {
		tree->left = insertAVL(tree->left, val);
		int l = getHeight(tree->left), r = getHeight(tree->right);
		if (l - r >= 2) {
			if (val > tree->left->val) {
				tree = leftRightRotate(tree);
			}
			else {
				tree = rightRotate(tree);
			}
		}
	}
	return tree;
}

int main() {
	int n, val;
	bool isComplete = 1, ed = 0;
	cin >> n;
	vector<vector<node*>> vdeep(n + 1);
	node *root = NULL;
	for (int i = 0; i < n; i++) {
		cin >> val;
		root = insertAVL(root, val);
	}
	queue<node*> q;
	q.push(root);
	root->deep = 1;
	while (!q.empty()) {
		node* t = q.front();
		vdeep[t->deep].push_back(t);
		q.pop();
		if (t->left != NULL) {
			t->left->deep = t->deep + 1;
			q.push(t->left);
			if (ed == 1 && isComplete == 1) {
				isComplete = 0;
			}
		}
		else {
			if (t->right != NULL) {
				if (ed == 0) ed = 1;
				if (isComplete == 1) isComplete = 0;
			}
			else {
				if (ed == 0) ed = 1;
			}
		}
		if (t->right != NULL) {
			t->right->deep = t->deep + 1;
			q.push(t->right);
			if (ed == 1 && isComplete == 1) {
				isComplete = 0;
			}
		}
		else {
			if (ed == 0) ed = 1;
		}
	}
	for (int i = 1; i <= n; i++) {
		for (node* k : vdeep[i]) {
			if (i != 1) cout << " ";
			cout << k->val;
		}
	}
	cout << endl;
	cout << ((isComplete) ? "YES" : "NO") << endl;
	return 0;
}
