//AC
//这道题使用STL排序必然超时
//使用树状数组+stack完成
//树状数组+二分法在求中位数时非常快速

#include <vector>
#include <iostream>
#include <algorithm>
#include <stack>
using namespace std;

const int maxn = 100010;
int c[maxn];
int n;
stack<int> s;
//lowbit add getsum 树状数组三连击 必记
int lowbit(int x) {
	return x & (-x);
}

void add(int x, int y) {
	for (int i = x; i < maxn; i += lowbit(i))
		c[i] += y;
}

int getsum(int x) {
	int sum = 0;
	for (int i = x; i > 0; i -= lowbit(i))
		sum += c[i];
	return sum;
}

int getmid() {
	int left = 1, right = maxn;
	int dest = (s.size() + 1) / 2;
	while (left < right) {
		int mid = (left + right) / 2;
		if (getsum(mid) < dest) {
			left = mid + 1;
		}
		if (getsum(mid) >= dest) {
			right = mid;
		}
	}
	return left;
}

int main() {
	int temp;
	scanf("%d", &n);
	char oper[11];
	for (int i = 0; i < n; i++) {
		scanf("%s", oper);
		if (oper[1] == 'o') {
			if (s.empty())
				printf("Invalid\n");
			else {
				printf("%d\n", s.top());
				add(s.top(), -1);
				s.pop();
			}
		}
		else if (oper[1] == 'u') {
			scanf("%d", &temp);
			s.push(temp);
			add(temp, 1);
		}
		else {
			if (s.empty())
				printf("Invalid\n");
			else 
				printf("%d\n", getmid());
		}
	}
	return 0;
}