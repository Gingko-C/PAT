#include <string>
using std::string;
#include <vector>
using std::vector;
#include <map>
using std::map;
#include <iostream>
using std::cout;
using std::cin;
using std::endl;
#include <algorithm>
 
int whowin(char a, char b) {
    if (a == b) return 0;
    if (a == 'C' && b == 'J') return 1;
    if (a == 'J' && b == 'B') return 1;
    if (a == 'B' && b == 'C') return 1;
    return -1;
}
 
struct Turn
{
    Turn(char a, char b) :player_A_use(a), player_B_use(b) {
        win = whowin(a, b);
    }
    char player_A_use, player_B_use;
    int win;
};
 
struct Player_data
{
    int win = 0, draw = 0, lose = 0;
    map<char, int> CJB;
};
 
int main() {
    int turn_num;
    vector<Turn> turns;
    char a, b;
    Player_data player_A, player_B;
    cin >> turn_num;
    for (int i = 0;i < turn_num;i++) {
        cin >> a >> b;
        turns.push_back({ a,b });
    }
    for (auto t : turns) {
        if (t.win==1) {
            player_A.win++;
            player_B.lose++;
            player_A.CJB[t.player_A_use]++;
        }
        if (t.win == 0) {
            player_A.draw++;
            player_B.draw++;
        }
        if (t.win == -1) {
            player_B.win++;
            player_A.lose++;
            player_B.CJB[t.player_B_use]++;
        }
    }
    cout << player_A.win << " " << player_A.draw << " " << player_A.lose << endl;
    cout << player_B.win << " " << player_B.draw << " " << player_B.lose << endl;
    int temp_max;
    temp_max = std::max(std::max(player_A.CJB['C'], player_A.CJB['J']), player_A.CJB['B']);
    if (player_A.CJB['B'] == temp_max) cout << "B ";
    else if (player_A.CJB['C'] == temp_max) cout << "C ";
    else if (player_A.CJB['J'] == temp_max) cout << "J ";
    temp_max = std::max(std::max(player_B.CJB['C'], player_B.CJB['J']), player_B.CJB['B']);
    if (player_B.CJB['B'] == temp_max) cout << "B" << endl;
    else if (player_B.CJB['C'] == temp_max) cout << "C"<<endl;
    else if (player_B.CJB['J'] == temp_max) cout << "J"<<endl;
    system("pause");
    return 0;
}